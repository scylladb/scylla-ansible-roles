---
- name: Set OS-specific task file path
  set_fact:
    check_ports_os_tasks_file: "{{ role_path }}/tasks/check_ports_{{ ansible_os_family }}_tasks.yml"

- name: Fail if OS-specific task file is missing
  fail:
    msg: "OS family '{{ ansible_os_family }}' is not supported for the port checking feature"
  when: not check_ports_os_tasks_file is file

- name: os-specific tasks
  include_tasks: "{{ check_ports_os_tasks_file }}"

- name: Create temporary listeners on required ports, if needed
  shell: |
    if ! ss -ltn | awk '{print $4}' | grep -q ":{{ port }}$"; then
      timeout {{ check_ports_listener_timeout_sec | int }} socat TCP-LISTEN:{{ port }},fork EXEC:'/bin/true'
    fi
  loop: "{{ ports_to_test }}"
  loop_control:
    loop_var: port
  async: "{{ (check_ports_listener_timeout_sec | int) + 10 }}"
  poll: 0

- name: Validate that the listeners are ready to accept connections before testing cross-host connectivity
  wait_for:
    host: "{{ ansible_host | default(inventory_hostname) }}"
    port: "{{ item }}"
    timeout: "{{ check_ports_client_timeout_sec | int }}"
    state: started
  loop: "{{ ports_to_test }}"

- name: Check if necessary ports are reachable from host group {{ source_host_group }}
  wait_for:
    host: "{{ hostvars[inventory_hostname]['ansible_host'] | default(inventory_hostname) }}"
    port: "{{ item[1] }}"
    timeout: "{{ check_ports_client_timeout_sec | int }}"
    state: started
  when: item[0] != inventory_hostname
  delegate_to: "{{ item[0] }}"
  loop: "{{ groups[source_host_group] | default([]) | product(ports_to_test) | list }}"

- name: Cleanup temporary socat listeners
  shell: |
    pkill -9 socat$
  ignore_errors: true
  become: true
