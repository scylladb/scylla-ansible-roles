---

# ---[ TODO ]-----------------------------------------------
#    0) Test better Ubuntu/Debian distros for specific version upgrades. Check if apt module should be used or not.
#    1) Downgrade support
#    2) Cross-edition upgrade/downgrade
# ---------------------------------------------------------

# Scylla matrix for supported distros, editions and versions
- name: Define Scylla support matrix
  ansible.builtin.set_fact:
    scylla_support: {
      # CentOS
      centos: {
        '8': {
          minimum_version: '8.0',
          template: 'redhat',
          oss: ['4.4','4.3','4.2','4.1'],
          enterprise: ['2021.1','2020.1'] 
        },
        '7': {
          minimum_version: '7.3',
          template: 'redhat',
          oss: ['4.4','4.3','4.2','4.1','4.0'],
          enterprise: ['2021.1','2020.1'] 
        }
      },
      # Debian
      debian: {
        '10': {
          minimum_version: '10',
          template: 'debian',
          oss: ['4.4','4.3','4.2','4.1'],
          enterprise: ['2021.1','2020.1'] 
        },
        '9': {
          minimum_version: '9',
          template: 'debian',
          oss: ['4.4','4.3','4.2','4.1','4.0'],
          enterprise: ['2021.1','2020.1'] 
        }
      },
      # Ubuntu
      ubuntu: {
        '20': {
          minimum_version: '20.04',
          template: 'ubuntu',
          oss: ['4.4','4.3'],
          enterprise: ['2021.1'] 
        },
        '18': {
          minimum_version: '18.04',
          template: 'ubuntu',
          oss: ['4.4','4.3','4.2','4.1','4.0'],
          enterprise: ['2021.1','2020.1'] 
        },
        '16': {
          minimum_version: '16.04',
          template: 'ubuntu',
          oss: ['4.4','4.3','4.2','4.1','4.0'],
          enterprise: ['2021.1','2020.1'] 
        }
      },
      # Red Hat
      redhat: {
        '8': {
          minimum_version: '8.0',
          template: 'redhat',
          oss: ['4.4','4.3','4.2','4.1'],
          enterprise: ['2021.1','2020.1'] 
        },
        '7': {
          minimum_version: '7.2',
          template: 'redhat',
          oss: ['4.4','4.3','4.2','4.1','4.0'],
          enterprise: ['2021.1','2020.1'] 
        }
      }        
    }

# Networking
- name: Resolve a scylla_listen_address as a fact
  set_fact:
    listen_address: "{{ scylla_listen_address }}"


# Scylla information
- name: Gather information about Scylla installation
  vars:
    is_oss_installed: "{{ true if 'scylla' in ansible_facts.packages else false }}"
    is_enterprise_installed: "{{ true if 'scylla-enterprise' in ansible_facts.packages else false }}"
    is_scylla_installed: "{{ is_oss_installed or is_enterprise_installed }}"
    edition_installed: "{{ 'oss' if is_oss_installed else 'enterprise' }}"
    package_installed: "{{ 'scylla' if is_oss_installed else 'scylla-enterprise' }}"
  ansible.builtin.set_fact:
    scylla_detected: {
      edition: "{{ edition_installed }}",
      edition_friendly_name: "{{ 'Open Source' if is_oss_installed else 'Enterprise' }}",
      package_name: "{{ package_installed }}",
      # Debian variants will return version == <release>-n.<date>.<commit>-n
      # RHEL/CentOS will return version == <release>
      version: "{{ (ansible_facts.packages[package_installed][0].version).split('-')[0] }}",
      major_version: "{{ (ansible_facts.packages[package_installed][0].version).split('.')[0] }}.{{ (ansible_facts.packages[package_installed][0].version).split('.')[1] }}"
    }
  when: is_scylla_installed

- name: Scylla detection problem
  ansible.builtin.fail:
    msg: "Scylla was not detected."
  when: scylla_detected is not defined
  any_errors_fatal: True

# Scylla installation validation
- name: Check existing Scylla installation operating system incompatibility
  ansible.builtin.fail:
    msg: "{{ ansible_facts['distribution'] }} {{ ansible_facts['distribution_version'] }} is not supported."  
  any_errors_fatal: True
  when: >
      ansible_facts['distribution'] |lower not in scylla_support or
      scylla_support[ansible_facts['distribution'] |lower][ansible_facts['distribution_major_version']] is not defined or
      ansible_facts['distribution_version'] is version(scylla_support[ansible_facts['distribution'] |lower][ansible_facts['distribution_major_version']]['minimum_version'],'<')

- name: Check existing Scylla installation edition and version incompatibility
  ansible.builtin.fail:
    msg: "Scylla {{ scylla_detected['edition_friendly_name'] }} {{ scylla_detected['version'] }} is not supported."
  when: scylla_detected['major_version'] not in scylla_support[ansible_facts['distribution'] |lower][ansible_facts['distribution_major_version']][scylla_detected['edition']]
  any_errors_fatal: True


# Scylla upgrade information
- name: Gather information about Scylla upgrade
  vars:
    is_oss_selected: "{{ true if scylla_edition == 'oss' else false }}"
    final_version: "{{ scylla_version if scylla_version != 'latest' else scylla_support[ansible_facts['distribution'] |lower][ansible_facts['distribution_major_version']][scylla_edition] |first }}"
  ansible.builtin.set_fact:
    # If this fact should be updated later, it should be updated entirely due to its structure
    scylla_upgrade: {
      edition: "{{ scylla_edition }}",
      edition_friendly_name: "{{ 'Open Source' if is_oss_selected else 'Enterprise' }}",
      version: "{{ final_version }}",
      major_version: "{{ final_version.split('.')[0] }}.{{ final_version.split('.')[1] }}",
      id: "{{ ansible_date_time.epoch }}",
      upgrade: true
    }

# Scylla version validation
- name: Check if Scylla version was specified incorrectly
  vars:
    version_format: "{{ 'X.Y.Z' if scylla_upgrade['edition'] else 'UVWX.Y.Z' }}"
  ansible.builtin.fail:
    msg: "Version {{ scylla_upgrade['version'] }} specified for Scylla {{ scylla_upgrade['edition_friendly_name'] }} is incomplete and can't be used for a minor upgrade. Version format is: '{{ version_format }}'."
  any_errors_fatal: True
  when:
    - scylla_version != 'latest'
    - scylla_upgrade['version'] == scylla_upgrade['major_version']
    - not upgrade_major

- name: Check if specified Scylla version can not be used as major upgrade
  ansible.builtin.fail:
    msg: "Version {{ scylla_upgrade['version'] }} specified for Scylla {{ scylla_upgrade['edition_friendly_name'] }} can't be used as a major upgrade since version detected is {{ scylla_detected['version'] }}."
  any_errors_fatal: True
  when: >
      scylla_version != 'latest' and upgrade_major and
      (scylla_detected['version'] == scylla_upgrade['version'] or
      scylla_detected['major_version'] == scylla_upgrade['major_version']) 

- name: Check if specified Scylla version can not be used as minor upgrade
  ansible.builtin.fail:
    msg: "Version {{ scylla_upgrade['version'] }} specified for Scylla {{ scylla_upgrade['edition_friendly_name'] }} can't be used as a minor upgrade since version detected is {{ scylla_detected['version'] }}."
  any_errors_fatal: True
  when: >
      not upgrade_major and
      (scylla_detected['version'] == scylla_upgrade['version'] or
      scylla_detected['major_version'] != scylla_upgrade['major_version'])

# Scylla upgrade validation and downgrade protection
- name: Check Scylla upgrade validation and downgrade protection
  block:
    - name: Check Scylla upgrade edition and version compatibility
      ansible.builtin.fail:
        msg: "Scylla {{ scylla_upgrade['edition_friendly_name'] }} {{ scylla_upgrade['major_version'] }} is not supported, thus it can't be used as upgrade."
      any_errors_fatal: True
      when:
        - scylla_upgrade['major_version'] not in scylla_support[ansible_facts['distribution'] |lower][ansible_facts['distribution_major_version']][scylla_upgrade['edition']]

    - name: Check if selected Scylla version is an upgrade or downgrade
      vars:
        detected_version: "{{ scylla_detected['major_version'] if upgrade_major else scylla_detected['version'] }}"
        upgraded_version: "{{ scylla_upgrade['major_version'] if upgrade_major else scylla_upgrade['version'] }}"
      ansible.builtin.set_fact:
        scylla_upgrade: {
          edition: "{{ scylla_upgrade['edition'] }}",
          edition_friendly_name: "{{ scylla_upgrade['edition_friendly_name'] }}",
          version: "{{ scylla_upgrade['version'] }}",
          major_version: "{{ scylla_upgrade['major_version'] }}",
          id: "{{ scylla_upgrade['id'] }}",
          upgrade: false
        }
      when: upgraded_version is version(detected_version,'<') and scylla_version != 'latest'

    - name: Check if downgrading is not allowed
      ansible.builtin.fail:
        msg: >
         "{{ scylla_upgrade['version'] }} is lower or equal than currently installed {{ scylla_detected['version'] }}.
          If you know what you are doing, specify `upgrade_allow_user_manual_downgrade: True' variable in your main playbook"
      any_errors_fatal: True
      when:
        - not scylla_upgrade['upgrade']
        - not upgrade_allow_user_manual_downgrade

# ----- TODO: Scylla cross-edition upgrade validation and downgrade protection -----
- name: Check Scylla cross-edition upgrade validation and downgrade protection
  ansible.builtin.fail:
    msg: "Cross-edition downgrade/upgrade is not implemented yet."
  any_errors_fatal: True
  when:
    - scylla_upgrade['edition'] != scylla_detected['edition']
    - upgrade_major
    - upgrade_cross_edition

# Determine whether an upgrade actually exists to its target release
- name: Determine available Enterprise updates for RedHat variants
  shell: 
    cmd: yum list available scylla-enterprise | egrep ^scylla-enterprise | awk '{ print $2 }'
  register: latest_release
  when: "'scylla-enterprise' in ansible_facts.packages and ansible_os_family == 'RedHat'"

- set_fact: latest_detected_release={{ latest_release.stdout }}
  when: latest_release.changed

- name: Determine available OSS updates for RedHat variants
  shell:
    cmd: yum list available scylla | egrep ^scylla | awk '{ print $2 }'
  register: latest_release
  when: "'scylla' in ansible_facts.packages and ansible_os_family == 'RedHat'"

- set_fact: latest_detected_release={{ latest_release.stdout }}
  when: latest_release.changed

# This check is necessary because when we are on latest under RHEL variants, `yum list available' will return an empty string
# therefore we pin the fact to its detected_version early on
- set_fact: latest_detected_release={{ scylla_detected['version'] }}
  when: ansible_os_family == 'RedHat' and latest_detected_release | length == 0 

- name: Determine available Enterprise updates for Debian variants
  shell:
    cmd: apt-cache madison scylla-enterprise | egrep ^scylla-enterprise | awk -F'|' '{ print $2 }' | head -1 | awk '{ print $1 }'
  register: latest_release
  when: "'scylla-enterprise' in ansible_facts.packages and ansible_os_family == 'Debian'"

- set_fact: latest_detected_release={{ latest_release.stdout }}
  when: latest_release.changed

- name: Determine available OSS updates for Debian variants
  shell:
    cmd: apt-cache madison scylla | egrep ^scylla | awk -F'|' '{ print $2 }' | head -1 | awk '{ print $1 }'
  register: latest_release
  when: "'scylla' in ansible_facts.packages and ansible_os_family == 'Debian'"

- set_fact: latest_detected_release={{ latest_release.stdout }}
  when: latest_release.changed

- name: Fail when requested version is not within the last release available
  fail:
    msg: "Requested upgrade to {{ scylla_upgrade['version'] }} but latest found in repository is {{ latest_detected_release }}"
  any_errors_fatal: True
  when: not upgrade_major and scylla_upgrade['version'] is version(latest_detected_release,'>=') and scylla_version != 'latest'

- name: Fail when latest is specified and we are already on latest
  fail:
    msg: "'latest' was specified, but currently installed version {{ scylla_detected['version'] }} is the same as last available {{ latest_detected_release }}"
  any_errors_fatal: True
  when: not upgrade_major and scylla_detected['version'] is version(latest_detected_release,'>=') and scylla_version == 'latest'

# If we are downgrading, build list of packages to downgrade
# RHEL Specific
- name: Create list of packages to downgrade
  set_fact:
    installed_pkgs: "{{ packages | dict2items | selectattr('key', 'match', '^' + scylla_detected['package_name']) | list | items2dict }}"
    pkg_list: []
  when: not scylla_upgrade['upgrade']

- name: Append results to list of packages
  set_fact:
    pkg_list: "{{ pkg_list + [ item.key + '-' + scylla_upgrade['version'] ] }}"
  loop: "{{ installed_pkgs | dict2items }}"
  when: not scylla_upgrade['upgrade'] and ansible_os_family == 'RedHat'

# Debian specific
- name: Set Scylla package prefix as OSS
  set_fact:
    scylla_package_prefix: "scylla"
  when: scylla_edition == 'oss' and ansible_os_family == 'Debian'

- name: Set Scylla package prefix as Enterprise
  set_fact:
    scylla_package_prefix: "scylla-enterprise"
  when: scylla_edition == 'enterprise' and ansible_os_family == 'Debian'

- name: "Upgrade Scylla to {{ scylla_upgrade['version'] }}"
  set_fact:
    scylla_version_to_install: "{{ scylla_upgrade['version'] }}"
  when:
    - scylla_version != 'latest'
    - ansible_os_family == 'Debian'

- name: "Upgrade Scylla to latest"
  set_fact:
    scylla_version_to_install: "latest"
  when:
    - scylla_version == 'latest'
    - ansible_os_family == 'Debian'

- name: Get versions of {{ scylla_edition }} package
  shell: apt list -a {{ scylla_package_prefix }} 2>/dev/null | grep `dpkg --print-architecture` | awk '{split($0,a," "); print a[2]}' | egrep -v "^{{ scylla_version_escaped }}[0123456789]+" | egrep "^{{ scylla_version_escaped }}" | sort | uniq
  register: aptversions
  vars:
    scylla_version_escaped: "{{ scylla_version_to_install | regex_escape }}"
  when: ansible_os_family == 'Debian'

- name: "Validate scylla version correctness"
  ansible.builtin.fail:
    msg: "Too many/few choices for a requested version '{{ scylla_version_to_install }}': {{ aptversions.stdout_lines }}. Bailing out!"
  when: ansible_os_family == 'Debian' and aptversions.stdout_lines | length != 1 and scylla_version_to_install != 'latest'
  any_errors_fatal: True

- name: Fetch version parts of Scylla package
  set_fact:
    scylla_version_split: "{{ aptversions.stdout | regex_findall(regexp, ignorecase=True) }}"
  vars:
    # All we know that the version is a string comprised of 3 parts separated by '-'
    regexp: '^([^\-]+)-([^\-]+)-([^\-]+)$'
  when: ansible_os_family == 'Debian'

- name: Append results to list of packages
  set_fact:
    pkg_list: "{{ pkg_list + [ item.key + '=' + aptversions.stdout ] }}"
  loop: "{{ installed_pkgs | dict2items }}"
  when: not scylla_upgrade['upgrade'] and ansible_os_family == 'Debian'

# Upgrade
- name: Trigger pre-upgrade tasks
  run_once: True
  include_tasks: upgrade.yml
  loop: "{{ groups['scylla'] }}"
  loop_control:
    loop_var: delegate_host

# Upgrade verification
- name: "Wait {{ upgrade_break_before_verification }} seconds before verifying the upgrade"
  ansible.builtin.wait_for:
    timeout: "{{ upgrade_break_before_verification |int }}"

- name: Verify if the upgrade was done sucessfully
  include_tasks: node_verification.yml
