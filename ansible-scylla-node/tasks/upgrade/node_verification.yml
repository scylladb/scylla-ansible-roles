---

# Check node status
- name: Check for leaving nodes
  ansible.builtin.uri:
    url: "http://{{ scylla_api_address }}:{{ scylla_api_port }}/storage_service/nodes/leaving"
    method: GET
  register: cluster_leaving_nodes
  until: cluster_leaving_nodes.status == 200
  retries: "{{ upgrade_api_default_retries |int }}"
  delay: "{{ upgrade_api_default_delay |int }}"

- name: Check for moving nodes
  ansible.builtin.uri:
    url: "http://{{ scylla_api_address }}:{{ scylla_api_port }}/storage_service/nodes/moving"
    method: GET
  register: cluster_moving_nodes
  until: cluster_moving_nodes.status == 200
  retries: "{{ upgrade_api_default_retries |int }}"
  delay: "{{ upgrade_api_default_delay |int }}"

- name: Check for joining nodes
  ansible.builtin.uri:
    url: "http://{{ scylla_api_address }}:{{ scylla_api_port }}/storage_service/nodes/joining"
    method: GET
  register: cluster_joining_nodes
  until: cluster_joining_nodes.status == 200
  retries: "{{ upgrade_api_default_retries |int }}"
  delay: "{{ upgrade_api_default_delay |int }}"

- name: Check for down nodes
  ansible.builtin.uri:
    url: "http://{{ scylla_api_address }}:{{ scylla_api_port }}/gossiper/endpoint/down/"
    method: GET
  register: cluster_down_nodes
  until: cluster_down_nodes.status == 200
  retries: "{{ upgrade_api_default_retries |int }}"
  delay: "{{ upgrade_api_default_delay |int }}"

- name: Check if the cluster status is not OK
  ansible.builtin.fail:
    msg: "Some node is not working as expected."
  when:
  - cluster_leaving_nodes |length == 0
  - cluster_moving_nodes |length == 0
  - cluster_joining_nodes |length == 0
  - cluster_down_nodes |length == 0


# Check version
- name: Get version installed
  ansible.builtin.uri:
    url: "http://{{ scylla_api_address }}:{{ scylla_api_port }}/storage_service/scylla_release_version"
    method: GET
  register: node_scylla_release_version
 
- name: Verify that selected and installed versions are not different
  vars:
    version_specified: "{{ scylla_upgrade['major_version'] if upgrade_major else scylla_upgrade['version'] }}"
    version_full_installed: "{{ node_scylla_release_version.json.split('-')[0] }}"
    version_major_installed: "{{ version_full_installed.split('.')[0] }}.{{ version_full_installed.split('.')[1] }}"
    version_installed: "{{ version_major_installed if upgrade_major else version_full_installed }}"
  ansible.builtin.fail:
    msg: "Version set ({{ version_specified }}) and version installed ({{ version_installed }}) are different, thus the upgrade failed."
  when: version_specified != version_installed
