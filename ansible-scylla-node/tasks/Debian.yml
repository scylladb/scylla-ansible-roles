---
- name: add Scylla repos
  block:
  - name: Install gnupg2 dependency
    apt:
      name: "gnupg2"
      state: present
      update_cache: yes
    when: install_type == 'online' and scylla_repo_keyserver is defined and scylla_repo_keys is defined and (scylla_repo_keys|length > 0)

  - name: Add an apt key by id from a keyserver
    apt_key:
      keyserver: "{{ scylla_repo_keyserver }}"
      id: "{{ item }}"
      state: present
    with_items: "{{ scylla_repo_keys }}"
    when: install_type == 'online' and scylla_repo_keyserver is defined and scylla_repo_keys is defined and (scylla_repo_keys|length > 0)

  - name: Add an Apt signing key for Debian
    apt_key:
      url: "{{ item }}"
      state: present
    with_items: "{{ scylla_repo_keyfile_urls }}"
    when: scylla_repo_keyfile_urls is defined and (scylla_repo_keyfile_urls|length > 0)

  - name: Install Scylla repo
    get_url:
      url: "{{ item }}"
      dest: '/etc/apt/sources.list.d/{{ item.split("/")[-1] | lower }}'
      mode: '0644'
      owner: root
    with_items: "{{ scylla_deb_repos }}"
    when: install_type == 'online' and item.split(".")[-1] == "list"

  become: true

- name: Install Scylla
  block:

  - name: Run "apt-get update"
    apt:
      update_cache: yes

  - name: Install additional dependencies
    apt:
      name: "{{ scylla_dependencies }}"
      state: present
      force_apt_get: yes
    when: scylla_dependencies is defined and (scylla_dependencies|length > 0)

  - name: Install Java
    apt:
      name: openjdk-8-jre-headless
      state: present
      force_apt_get: yes

  - name: Correct java version selected
    alternatives:
      name: java
      path: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java

  - name: Install latest OSS Scylla
    apt:
      name: scylla
      state: latest
    when: scylla_version == 'latest' and scylla_edition == 'oss'

  - name: Install latest Enterprise Scylla
    apt:
      name: scylla-enterprise
      state: latest
    when: scylla_version == 'latest' and scylla_edition == 'enterprise'

  - name: Install specified OSS Scylla
    block:
      - name: Get versions of scylla package
        shell: apt list -a scylla | grep {{ scylla_version }}
        register: aptversions

      - name: Search for version of scylla package
        set_fact:
          tempsversion: "{{ aptversions.stdout | regex_findall(regexp) }}"
        vars:
            regexp: ' ([0-9\.]+)-([a-f0-9\.]+)-([0-9]) '

      - name: Set scylla version if only one version found
        set_fact:
          sversion: "{{ tempsversion }}"
        when: tempsversion | length == 1

      - name: Requery for scylla version if multiple versions found
        block:
          - name: query for version with - at the end of {{ scylla_version }}
            shell: apt list -a scylla | grep {{ scylla_version }}-
            register: aptversions

          - name: Search for version of scylla package with - postfix
            set_fact:
              rtempsversion: "{{ aptversions.stdout | regex_findall(regexp) }}"
            vars:
                regexp: ' ([0-9\.]+)-([a-f0-9\.]+)-([0-9]) '

          - name: Set scylla version if only one version with - found
            set_fact:
              sversion: "{{ rtempsversion }}"
            when: rtempsversion | length == 1

          - name: Error out, wrong Scylla version was passed, please fix it!
            ansible.builtin.command: /bin/false
            when: rtempsversion | length > 1
        when: tempsversion | length > 1

      - name: query for dependencies of Scylla {{ sversion }}
        shell: |
          apt depends scylla={{ sversion[0][0] }}-{{ sversion[0][1] }}-{{ sversion[0][2] }} | grep "Depends: scylla"
        register: packages
        become: true

      - name: Set list of packages as a fact
        set_fact:
          spackages: "{{ packages.stdout | regex_findall(regexp) }}"
        vars:
            regexp: ': ([a-z0-9+-\.]+) \(= ([a-f0-9-\.]+)\)'

      - name: query for dependencies of scylla-server {{ sversion }}
        shell: |
          apt depends scylla-server={{ sversion[0][0] }}-{{ sversion[0][1] }}-{{ sversion[0][2] }} | grep "Depends: scylla"
        register: sspackages
        become: true

      - name: Set list of packages as a fact
        set_fact:
          sspackages: "{{ sspackages.stdout | regex_findall(regexp) }}"
        vars:
            regexp: ': ([a-z0-9+-\.]+) \(= ([a-f0-9-\.]+)\)'

      - name: Create pkg list from packages and versions
        set_fact:
          pkg_list: "{{ pkg_list|default([]) + [ item[0] + '=' + item[1] ] }}"
        with_list: "{{ spackages + sspackages }}"

      - name: Install specified OSS Scylla packages
        apt:
          name: "{{ pkg_list }}"
          state: present

#      - name: Install meta Scylla package
#        apt:
#          name: "scylla={{ sversion[0][0] }}-{{ sversion[0][1] }}*"
#          state: present

    when: scylla_version != 'latest' and scylla_edition == 'oss'

  - name: Install specified Enterprise Scylla
    block:
      - name: Get versions of scylla-enterprise package
        shell: apt list -a scylla-enterprise | grep {{ scylla_version }}
        register: aptversions

      - name: Search for version of scylla package
        set_fact:
          tempsversion: "{{ aptversions.stdout | regex_findall(regexp) }}"
        vars:
            regexp: ' ([0-9\.]+)-([a-f0-9\.]+)-([0-9]) '

      - name: Set scylla version if only one version found
        set_fact:
          sversion: "{{ tempsversion }}"
        when: tempsversion | length == 1

      - name: Requery for scylla version if multiple versions found
        block:
          - name: query for version with - at the end of {{ scylla_version }}
            shell: apt list -a scylla-enterprise | grep {{ scylla_version }}-
            register: aptversions

          - name: Search for version of scylla package with - postfix
            set_fact:
              rtempsversion: "{{ aptversions.stdout | regex_findall(regexp) }}"
            vars:
                regexp: ' ([0-9\.]+)-([a-f0-9\.]+)-([0-9]) '

          - name: Set scylla version if only one version with - found
            set_fact:
              sversion: "{{ rtempsversion }}"
            when: rtempsversion | length == 1

          - name: Error out, wrong Scylla version was passed, please fix it!
            ansible.builtin.command: /bin/false
            when: rtempsversion | length > 1
        when: tempsversion | length > 1

      - name: query for dependencies of scylla-enterprise {{ sversion }}
        shell: |
          apt depends scylla-enterprise={{ sversion[0][0] }}-{{ sversion[0][1] }}-{{ sversion[0][2] }} | grep "Depends: scylla"
        register: packages
        become: true

      - name: Set list of packages as a fact
        set_fact:
          spackages: "{{ packages.stdout | regex_findall(regexp) }}"
        vars:
            regexp: ': ([a-z0-9+-\.]+) \(= ([a-f0-9-\.]+)\)'

      - name: query for dependencies of scylla-enterprise-server {{ sversion }}
        shell: |
          apt depends scylla-enterprise-server={{ sversion[0][0] }}-{{ sversion[0][1] }}-{{ sversion[0][2] }} | grep "Depends: scylla"
        register: sspackages
        become: true

      - name: Set list of packages as a fact
        set_fact:
          sspackages: "{{ sspackages.stdout | regex_findall(regexp) }}"
        vars:
            regexp: ': ([a-z0-9+-\.]+) \(= ([a-f0-9-\.]+)\)'

      - name: Create pkg list from packages and versions
        set_fact:
          pkg_list: "{{ pkg_list|default([]) + [ item[0] + '=' + item[1] ] }}"
        with_list: "{{ spackages + sspackages }}"

      - name: Install specified Enterprise Scylla packages
        apt:
          name: "{{ pkg_list }}"
          state: present

#      - name: Install meta Enterprise Scylla package
#        apt:
#          name: "scylla-enterprise={{ sversion[0][0] }}-{{ sversion[0][1] }}*"
#          state: present
    when: scylla_version != 'latest' and scylla_edition == 'enterprise'
  become: true

# TODO: Implement this for the debian based distros
# - name: install prerequisite python-yaml
#   shell: |
#     for i in `yum search python3|grep -i pyyaml|awk '{ print $1 }'`; do sudo yum -y install $i; done
#   become: true


- name: install and configure Scylla Manager Agent
  block:
    - name: Add an apt key by id from a keyserver
      apt_key:
        keyserver: "{{ scylla_repo_keyserver }}"
        id: "{{ item }}"
        state: present
      with_items: "{{ scylla_manager_repo_keys }}"
      when: install_type == 'online' and scylla_repo_keyserver is defined and scylla_manager_repo_keys is defined and (scylla_manager_repo_keys|length > 0)
      become: true

    - name: add Scylla Manager repo
      get_url:
        url: "{{ scylla_manager_deb_repo_url }}"
        dest: '/etc/apt/sources.list.d/{{ scylla_manager_deb_repo_url.split("/")[-1] | lower }}'
        mode: '0644'
        owner: root
      when: scylla_manager_deb_repo_url.split(".")[-1] == "list"

    - name: Run "apt-get update"
      apt:
        update_cache: yes

    - name: install the manager agent
      apt:
        name: scylla-manager-agent
        state: present
      when: (scylla_manager_agent_upgrade is not defined) or (scylla_manager_agent_upgrade|bool == False)

    - name: install the latest manager agent
      apt:
        name: scylla-manager-agent
        state: present
      notify: scylla-manager-agent restart
      when: scylla_manager_agent_upgrade is defined and scylla_manager_agent_upgrade|bool

  become: true
  when: scylla_manager_enabled|bool == true

- name: install XFSprogs
  apt:
    name: xfsprogs
    state: present
  become: true
