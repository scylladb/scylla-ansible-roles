---

- name: For every node, check if local crt file exists
  stat:
    path: "{{ ssl_localhost_cert_path }}"
  register: _localhost_node_crt
  delegate_to: localhost

- name: For every node, check if local key file exists
  stat:
    path: "{{ ssl_localhost_cert_key_path }}"
  register: _localhost_node_key
  delegate_to: localhost

- name: Set existence of local crt and key as a single fact
  set_fact:
    _localhost_crt_and_key_exist: "{{ hostvars[item]['_localhost_node_crt'].stat.exists and hostvars[item]['_localhost_node_key'].stat.exists }}"
  loop: "{{ groups['scylla'] }}"
  when: _localhost_crt_and_key_exist is not defined or _localhost_crt_and_key_exist == True
  run_once: true

- name: Check if at least one local crt was provided
  set_fact:
    _some_localhost_crt_and_key_exist: "{{ hostvars[item]['_localhost_node_crt'].stat.exists or hostvars[item]['_localhost_node_key'].stat.exists }}"
  loop: "{{ groups['scylla'] }}"
  when: _some_localhost_crt_and_key_exist is not defined or _some_localhost_crt_and_key_exist == False
  run_once: true

- name: Check if local CA exists
  block:
    - name: Check if local CA crt file exists
      stat:
        path: "{{ ssl_localhost_ca_path }}"
      register: _ca_crt
    - name: Check if local CA key file exists
      stat:
        path: "{{ ssl_localhost_ca_key_path }}"
      register: _ca_key
    - set_fact:
        _localhost_ca_crt_and_key_exist: "{{ _ca_crt.stat.exists|bool and _ca_key.stat.exists|bool }}"
  delegate_to: localhost
  run_once: true

- fail:
    msg: "You've provided crts only for a subset of your nodes. Either provide a CA that should be used for generating equivalent certificates for the others or delete the existing crts in order for the role to generate a new self-signed CA and certs for all the nodes"
  run_once: true
  when: not _localhost_crt_and_key_exist and _some_localhost_crt_and_key_exist and not _localhost_ca_crt_and_key_exist

- name: Validate if remote and local crt/key are the same
  block:
    - name: Check if crt and key exist in the target node
      stat:
        path: "{{ item }}"
      register: _crt_and_key_exist
      loop:
        - "{{ ssl_cert_path }}"
        - "{{ ssl_cert_key_path }}"

    - name: Fail if a remote crt/key exists but a local doesn't or if both versions exist but are different
      fail:
        msg: "Remote crt/key doesn't match a local one"
      when: (_crt_and_key_exist.results[0].stat.exists and (not _localhost_node_crt.stat.exists or _crt_and_key_exist.results[0].stat.checksum != _localhost_node_crt.stat.checksum)) or (_crt_and_key_exist.results[1].stat.exists and (not _localhost_node_key.stat.exists or _crt_and_key_exist.results[1].stat.checksum != _localhost_node_key.stat.checksum))

- name: Generate certificates
  block:
    - name: Generate self-signed CA
      include_role:
        name: ansible-scylla-common
        tasks_from: generate_certificate_and_key.yml
      vars:
        cert_path: "{{ ssl_localhost_ca_path }}"
        cert_key_path: "{{ ssl_localhost_ca_key_path }}"
        cert_common_name: "{{ scylla_cluster_name }}.internal"
        cert_san: 
          - "DNS:{{ scylla_cluster_name }}.internal"
        cert_basic_constraints: ['CA:TRUE']
        cert_key_usage: ['keyCertSign']
      run_once: true
      when: not _localhost_ca_crt_and_key_exist

    - name: Generate certificates
      include_role:
        name: ansible-scylla-common
        tasks_from: generate_certificate_and_key.yml
      vars:
        cert_path: "{{ ssl_localhost_cert_path }}"
        cert_key_path: "{{ ssl_localhost_cert_key_path }}"
        cert_common_name: "{{ scylla_broadcast_rpc_address }}"
        cert_san: "{{ ssl_cert_san + (['DNS:'] | product(ssl_cert_san_dns) | map('join') | list) }}"
        cert_basic_constraints: ['CA:FALSE']
        cert_key_usage: ['digitalSignature', 'keyEncipherment']
        ca_path: "{{ ssl_localhost_ca_path }}"
        ca_key_path: "{{ ssl_localhost_ca_key_path }}"
  delegate_to: localhost
  when: _localhost_crt_and_key_exist == False

- name: Copy the certificates and keys into their proper locations
  copy:
    src: "{{ item[0] }}"
    dest: "{{ item[1] }}"
    owner: root
    group: root
    mode: '0644'
    force: false
  become: true
  loop:
    - ["{{ ssl_localhost_cert_path }}", "{{ ssl_cert_path }}"]
    - ["{{ ssl_localhost_cert_key_path }}", "{{ ssl_cert_key_path }}"]

- name: Copy truststore to the nodes
  block:
    - name: Check if truststore exists in the localhost
      stat:
        path: "{{ ssl_localhost_truststore_path }}"
      register: _localhost_truststore_stat
      delegate_to: localhost

    - name: Copy truststore to the target node
      copy:
        src: "{{ ssl_localhost_truststore_path }}"
        dest: "{{ ssl_truststore_path }}"
        owner: root
        group: root
        mode: '0644'
        force: false
      become: true
      when: _localhost_truststore_stat.stat.exists

    - name: Set _truststore_exists
      set_fact:
        _truststore_exists: "{{ _localhost_truststore_stat.stat.exists }}"

- name: Generate cqlshrc
  template:
    src: templates/cqlshrc.j2
    dest: "{{ inventory_dir }}/cqlshrc"
  delegate_to: localhost
  run_once: true
