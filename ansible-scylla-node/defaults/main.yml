---
# DON'T EDIT THIS FILE. JUST OVERRIDE THE VARIABLES.

# ==============================
# UPGRADE
# ==============================

# Upgrades Scylla version if a previous installation is detected
# Values:
#  [default] false: don't check for upgrades
#  true: check for upgrades and apply them
upgrade_version: false

# Defines if the upgrade is 'major' or 'minor' (patch)
# Values:
#  [default] false: 'minor' upgrade
#  true: 'major' upgrade
upgrade_major: false

# Defines if the upgrade process must be forced
# Values:
#  [default] true: always upgrade even if the same version is installed
#  false: don't do anything
upgrade_force: true

# Defines if the upgrade process should rollback on failure
# Values:
#  [default] true: rollback on failure
#  false: don't do anything
upgrade_rollback_on_failure: true

# Defines if the cross-edition upgrade is allowed
# Values:
#  [default] false: cross-edition upgrade not allowed
#  true: cross-edition upgrade allowed
upgrade_cross_edition: false

# Defines if the user can manually run a downgrade
# Values:
#  [default] false: manual downgrade not allowed
#  true: manual downgrade allowed (FOR EXPERIENCED USERS ONLY!)
upgrade_allow_user_manual_downgrade: false

# Defines if the version specified should be changed in case a straight upgrade is not possible
# Values:
#  [default] true: automatically change the upgrade version
#  false: keep the specified version
upgrade_autocorrect_version: true

# Defines if snapshots should be generated before starting the upgrade
# Values:
#  [default] false: don't generate snapshots
#  true: generate snapshots
upgrade_generate_snapshots: false

# Defines how many retries should be used for API usage before failing
# Values:
#  [default] 20
#  Any value above 0
upgrade_api_default_retries: 20

# Defines how many seconds of delay should be applied between retries for API usage
# Values:
#  [default] 15
#  Any value above 0
upgrade_api_default_delay: 15

# Defines how many seconds Ansible should wait before starting the verification process
# Values:
#  [default] 90
#  Any value above 0
upgrade_break_before_verification: 90

# Defines backup folder path
# Values:
#  [default] /root/scylla-backup
#  Any valid folder
upgrade_backup_path: /root/scylla-backup

# ==============================
# INSTALL
# ==============================

scylla_cluster_name: 'testcluster123'

# set to true if the role should enable the specified repos, install the binaries and stop
install_only: false

# Change here or override in vars
scylla_nic: "{{ ansible_default_ipv4.interface }}"

cluster_local_files_path: "{{ inventory_dir }}"

# online|offline - offline will disable all the attepts to download packages
# node_exporter will need to be installed manually
install_type: online

# Defines if the node firewall should be enabled or not
# Values:
#  [default] false: all front-end firewall services will be disabled and iptables rules flushed
#  true: keep node configuration as is
firewall_enabled: false

# URL of an RPM .repo file or a DEB .list file
# deprecated in favour of below, it will be dropped soon, below should be used
#scylla_repos:
#  - http://downloads.scylladb.com/rpm/centos/scylla-2021.1.repo
#
# Both scylla_deb_repos and scylla_rpm_repos, if undefined, would resolve to a URL that corresponds
# to a scylla version to which scylla_version resolves to.
#scylla_deb_repos:
#  - http://downloads.scylladb.com/deb/ubuntu/scylla-2021.1.list
#
#scylla_rpm_repos: "{{ scylla_repos }}"

# Use a newer kernel from ELRepo (was recommended for RHEL/CentOS until 5.11)
# Reboot after the elrepo kernel has been installed is recommended as well.
# Note that kernel 5.16 has serious issues on GCP and on Azure, last known
# working kernel was 5.11 that can now only be used from archives
elrepo_kernel: False
reboot_after_kernel_upgrade: False

# set this to false when the role isn't being applied to a full inventory reflecting the whole cluster
full_inventory: true

# set this to false to disable automatic
# authenticator: PasswordAuthenticator
# authorizer: CassandraAuthorizer
# injected into scylla.yaml
# !!! also make sure you override scylla_yaml_params and remove authorization from there !!!
scylla_authentication: True

# Set this to false to disable automatic adjustment of system_auth keyspace replication
adjust_system_auth_replication: False

# Set this to false to disable automatic adjustment of audit keyspace replication
adjust_audit_replication: False

# Set this to false to disable automatic adjustment of system_distributed keyspace replication
adjust_system_distributed_replication: False

# Set this to false to disable automatic adjustment of system_traces keyspace replication
adjust_system_traces_replication: False

# Replication variables and cql credentials are intended to be used to adjust system_auth and audit keyspaces when necessary.
system_auth_rf: 3
system_auth_replication_strategy: NetworkTopologyStrategy
audit_rf: 3
audit_replication_strategy: NetworkTopologyStrategy
system_distributed_rf: 3
system_distributed_replication_strategy: NetworkTopologyStrategy
system_traces_rf: 3
system_traces_replication_strategy: NetworkTopologyStrategy

# scylla_admin_default_user must be a valid user defined in the inventory.ini under the cql_credentials section.
# scylla_admin_default_user: scylla_admin

repair_timeout_seconds: 36000
cleanup_timeout_seconds: 36000

# set to enabled when the scylla-server service should be started by applying the role.
# if, for example, we add a node, but prefer to wait before we start the service and add it to the cluster,
# this should be set to false
start_scylla_service: true

# Only relevant for Debian/Ubuntu
scylla_repo_keyserver: 'hkp://keyserver.ubuntu.com:80'
scylla_repo_keys:
  - d0a112e067426ab2
  - 5e08fbd8b5d6ec9c

scylla_repo_keyring_dir: /etc/apt/keyrings/
scylla_repo_keyringfile: "{{ scylla_repo_keyring_dir }}/scylladb.gpg"

scylla_manager_repo_keys:
  - d0a112e067426ab2
  - 5e08fbd8b5d6ec9c
  - 6B2BFD3660EF3F5B
  - 17723034C56D4B19


# Set when relevant (Debian for example)
#scylla_repo_keyfile_urls:
#  - https://download.opensuse.org/repositories/home:/scylladb:/scylla-3rdparty-stretch/Debian_9.0/Release.key

# Configure when additional dependency packages are required (only for some distributions)
scylla_dependencies:
  - curl
  - wget
  - python3-yaml # this will fail on non centos systems
  #- software-properties-common
  #- apt-transport-https
  #- gnupg2
  #- dirmngr

# Specify a Scylla version here (should be available in repo)
# ex: scylla_version: 2019.1.9 or 3.2.1
# Default is intentionally invalid version - it MUST be overridden
# 'latest' value would resolve to a current latest OSS or Enterprise version
# according to a scylla_edition value.
scylla_version: '0.0.0'

# Options are oss|enterprise
#scylla_edition: oss
scylla_edition: enterprise

# Set to true if you want to allow a Role to upgrade and already installed Scylla
skip_installed_scylla_version_check: False

scylla_snitch: GossipingPropertyFileSnitch

# OPTIONAL: If GossipingPropertyFileSnitch in use, set this variable as per Scylla documentation
# https://docs.scylladb.com/operating-scylla/system-configuration/snitch/#gossipingpropertyfilesnitch
gpfs_prefer_local: "true"

# IO settings
# probe for IO figures on one node and reuse the figures on all nodes (recommended: True)
scylla_io_probe: True

# If set to True, scylla_io_probe must be True and dc variable must be defined in the inventory
# for each one of the nodes.
# This will make sure that scylla_io_setup will be executed in one node from each datacenter
# and then the configuration files will be propagated for the other nodes of each datacenter.
scylla_io_probe_dc_aware: False

# If set to True the content of io.conf is going to be aligned with the first node or the
# first node in each DC (depending on the value of scylla_io_probe_dc_aware)
always_replace_io_conf: False

# If set to True the content of io_properties.yaml is going to be aligned with the first node or the
# first node in each DC (depending on the value of scylla_io_probe_dc_aware)
always_replace_io_properties: False

# These can be arbitrarily set if scylla_io_probe is set to False
# io_properties:
#   disks:
#     - mountpoint: /var/lib/scylla/data
#       read_iops: 10962999
#       read_bandwidth: 348093056
#       write_iops: 9722999
#       write_bandwidth: 352182944

io_conf: 'SEASTAR_IO="--io-properties-file /etc/scylla.d/io_properties.yaml"'

# Seeds node list
scylla_seeds:
  - "{{ groups['scylla'][0] }}"

scylla_listen_address: "{{ vars['ansible_'~scylla_nic].ipv4.address }}"
scylla_rpc_address: "{{ vars['ansible_'~scylla_nic].ipv4.address }}"
scylla_broadcast_address: "{{ vars['ansible_'~scylla_nic].ipv4.address }}"
scylla_broadcast_rpc_address: "{{ scylla_rpc_address }}"

scylla_api_address: '127.0.0.1'
scylla_api_port: '10000'

# Additional parameters for scylla.yaml, only usable for the simple one-line parameters
# Check the official scylla.yaml for available options.
scylla_yaml_params:
  authorizer: CassandraAuthorizer
  authenticator: PasswordAuthenticator
  internode_compression: all

# SSL configuration for Scylla nodes:
# localhost_cert_path is the path where the certificates will be stored in the localhost before they're coppied to the nodes. If not set,
# the playbook will consider it to be the same path where the inventory is located.
# cert_path is the path where the certificates will be placed in the scylla nodes.
# If no certificates are present, this playbook will generate a selfsigned CA and node certificates locally and push them out to all the nodes.
# WARNING: if a local ${localhost_cert_path}/ssl/ directory is not present and populated by existing certificates for all nodes, it will be generated
# and certificates on the nodes can get overwritten with new certificates.
# To use existing certificates:
# 1. To use your own CA, place it in ${localhost_cert_path}/ssl/ca/{{ scylla_cluster_name }}-ca.crt and its respective key in
# ${localhost_cert_path}/ssl/ca/{{ scylla_cluster_name }}-ca.pem and derived per-node certificates will be generated from it, if they are not present.
# 2. To use your own node certificates, create a directory per hostname (same as in the inventory) in ${localhost_cert_path}/ssl/{{ hostname }}
# and place the .pem and .crt files as {{ hostname }}.pem and {{ hostname }}.crt respectively and then place the CA you used to sign the certificates in
# ${localhost_cert_path}/ssl/ca/{{ scylla_cluster_name }}-ca.crt and its respective key in ${localhost_cert_path}/ssl/ca/{{ scylla_cluster_name }}-ca.pem.
# To skip this configuration entirely, set enabled: false for both options or comment out the scylla_ssl variable.
scylla_ssl:
  # localhost_cert_path: path/to/certificates
  cert_path: /etc/scylla
  internode:
    enabled: true
    internode_encryption: all
  client:
    enabled: true

# Two types of encryption keys are available: System Keys and Table Keys.

# System keys can be used for encrypting system data, like commit logs, batches and hints logs.
# However, in the context of table keys (for encrypting sstables), if the user decides to use
# a Replicated Key Provider, a system key will also be necessary for encrypting the encrypted_keys table,
# where the replicated keys will be kept.
# If you want to use this role for managing your system keys, regardless of them being used for system_info encryption
# or for encrypting the encrypted_keys table, you should set {{ handle_system_keys }} to true and place all of your system
# keys under the {{ localhost_system_key_directory }} folder. The role will copy all the local keys to the {{ system_key_directory }}
# of every node.
# Note that by default the {{ inventory_hostname }} is part of the localhost_system_key_directory. This allows you to define
# different keys per host.
# e.g.:
# If your localhost_system_key_directory is set to "{{ inventory_dir }}/encryption_at_rest/{{ inventory_hostname }}/system_encryption_keys"
# and you have the following file tree:
#
# ├── encryption_at_rest
# │   ├── node1
# │   │   └── system_encryption_keys
# │   │       └── key1
# │   ├── node2
# │   │   └── system_encryption_keys
# │   │       └── key2
# │   └── node3
# │       └── system_encryption_keys
# │           └── key3
# └── inventory.ini
#
# At the end of the process node1 will have key1, node2 will have key2 and node3 will have key3.
# On the other hand, if you want to have the same keys for all the hosts you can define a {{ localhost_system_key_directory }}
# without the {{ inventory_hostname }} in it or simply copy the same key for all the node folders.

handle_system_keys: false
localhost_system_key_directory: "{{ inventory_dir }}/encryption_at_rest/{{ inventory_hostname }}/system_encryption_keys"
system_key_directory: "/etc/scylla/system_encryption_keys"

# Table keys are used for encrypting SSTables. Depending on your key provider, this key is stored in different locations:
# Replicated key provider - encrypted_keys table
# KMIP key provider - KMIP server
# KMS key provider - AWS
# Local key provider - in a local file with multiple keys. You can provide your own key or Scylla can make one for you.

# You can use this role for managing your local table keys. In order to do so, you need to set {{ handle_table_keys }} to true
# and place all of your local table keys under the {{ localhost_table_key_directory }} folder. The role will copy all the
# local table keys to the {{ table_key_directory }} folder.
# Note that by default the {{ inventory_hostname }} is part of the localhost_table_key_directory. This allows you to define
# different keys per host.
# e.g.:
# If your localhost_table_key_directory is set to "{{ inventory_dir }}/encryption_at_rest/{{ inventory_hostname }}/table_encryption_keys"
# and you have the following file tree:
#
# ├── encryption_at_rest
# │   ├── node1
# │   │   └── table_encryption_keys
# │   │       └── key1
# │   ├── node2
# │   │   └── table_encryption_keys
# │   │       └── key2
# │   └── node3
# │       └── table_encryption_keys
# │           └── key3
# └── inventory.ini
#
# At the end of the process node1 will have key1, node2 will have key2 and node3 will have key3.
# On the other hand, if you want to have the same keys for all the hosts you can define a {{ localhost_table_key_directory }}
# without the {{ inventory_hostname }} in it or simply copy the same key for all the node folders.

handle_table_keys: false
localhost_table_key_directory: "{{ inventory_dir }}/encryption_at_rest/{{ inventory_hostname }}/table_encryption_keys"
table_key_directory: "/etc/scylla/table_encryption_keys"

# Encrypt system resources:
# System encryption is applied to semi-transient on-disk data, such as commit logs, batch logs, and hinted handoff data.
# Note that for system info encryption, only the following key providers are supported:
# LocalKeyProvider: Stores the key on the same machine as the data. Please use the system_info_encrypt_local config.
# KMIPKeyProvider: External key management server. Please use the system_info_encryption_kmip config.
# KMSKeyProvider: Uses key(s) provided by the AWS KMS service. Please use the system_info_encryption_kms config.

# If you decide to use a LocalKeyProvider and also want the role to manage the local key that will be used, make sure you
# have {{ handle_system_keys }}, {{ localhost_system_key_directory }} and {{ system_key_directory }} set appropriately.

# LocalKeyProvider:
system_info_encryption_local:
  enabled: false
  secret_key_file: "{{ system_key_directory }}/system_info_key"
  cipher_algorithm: AES/CBC/PKCS5Padding
  secret_key_strength: 128

# KMIPKeyProvider:
# Make sure you set kmip_hosts accordingly
system_info_encryption_kmip:
  enabled: false
  cipher_algorithm: AES
  secret_key_strength: 128
  kmip_host: yourkmipServerIP.com

# KMSKeyProvider:
# Make sure you set kms_hosts accordingly
system_info_encryption_kms:
  enabled: false
  cipher_algorithm: AES/CBC/PKCS5Padding
  secret_key_strength: 128
  kms_host: myScylla


# If Scylla Manager will be used, set the following variables
scylla_manager_enabled: true
# deprecated in favour of below, it will be dropped soon, below should be used
scylla_manager_repo_url: "http://downloads.scylladb.com/rpm/centos/scylladb-manager-2.6.repo"

scylla_manager_deb_repo_url: "http://downloads.scylladb.com/deb/ubuntu/scylladb-manager-2.6.list"
scylla_manager_rpm_repo_url: "{{ scylla_manager_repo_url }}"

scylla_manager_agent_upgrade: true

# Manager Agent Backup configuration - this is a free text which will be inserted into the configuration file
# Please ensure it is a valid and working configuration. Please refer to the example configuration file and the
# documentation for detailed instructions
scylla_manager_agent_config: |
  s3:
    access_key_id: 12345678
    secret_access_key: QWerty123456789
    provider: AWS
    region: us-east-1c
    endpoint: https://foo.bar.baz
    server_side_encryption:
    sse_kms_key_id:
    upload_concurrency: 2
    chunk_size: 50M
    use_accelerate_endpoint: false

# Configure raid disks via scylla_setup. This requires a list of disks to add to the raid
# scylla_raid_setup:
  # - /dev/nvme0n1
  # - /dev/nvme0n2
  # - /dev/nvme0n3
scylla_raid_online_discard: False

skip_coredump: False
devmode: False
#below can be dangerous, sysconfig also sets cpuset, so disable both to not do any cpuset.conf changes!
skip_cpuset: False
skip_sysconfig: False
skip_selinux: False
skip_ntp: False
skip_swap: False
skip_mem_setup: False

# Set it to 0 to let scylla choose the swap size.
# Note that the minimum supported value is 1024mb, so any non-zero value smaller than 1024 will be changed to 1024
swap_file_size_mb: 0

# If defined, this enables the usage of a separate token_distributor instead of scylla's default random token distributor
# The token distributor in the provided path must be named token_distributor.py and must have the following list of arguments:
# --node, --rack, --dc, --rf and --get-current-tokens.
# --node must be followed by a comma-separated list with the all the nodes in the cluster.
# --rack must be followed by a comma-separated list indicating the racks of each one of the nodes in the node list,
#        in the same order as the nodes were provided.
# --dc must be followed by a comma-separated list indicating the datacenters of each one of the nodes in the node list,
#      in the same order as the nodes were provided.
# --rf must be followed by a comma-separated list indicating the replication-factors for which the token ring should
#      be optimized. Example: "dc1=3,dc2=2".
# token_distributor:
#   path: /path/too/token_distributor
#   rf: us-east1=3,us-east2=2

# Default bootstrap timeout
scylla_bootstrap_wait_time_sec: 25200

# sysctl tuning defaults, please leave in place if unsure
update_sysctl: True
sysctl:
  - name: 'fs.file-max'
    value: '2097152'
  - name: 'vm.swappiness'
    value: '10'
  - name: 'vm.dirty_ratio'
    value: '60'
  - name: 'vm.dirty_background_ratio'
    value: '2'
  - name: 'net.ipv4.tcp_synack_retries'
    value: '2'
  - name: 'net.ipv4.ip_local_port_range'
    value: '2000 65535'
  - name: 'net.ipv4.tcp_rfc1337'
    value: '1'
  - name: 'net.ipv4.tcp_fin_timeout'
    value: '15'
  - name: 'net.ipv4.tcp_keepalive_time'
    value: '300'
  - name: 'net.ipv4.tcp_keepalive_probes'
    value: '5'
  - name: 'net.ipv4.tcp_keepalive_intvl'
    value: '15'
  - name: 'net.core.rmem_default'
    value: '31457280'
  - name: 'net.core.rmem_max'
    value: '12582912'
  - name: 'net.core.wmem_default'
    value: '31457280'
  - name: 'net.core.wmem_max'
    value: '12582912'
  - name: 'net.core.somaxconn'
    value: '65535'
  - name: 'net.core.netdev_max_backlog'
    value: '65535'
  - name: 'net.core.optmem_max'
    value: '25165824'
  - name: 'net.ipv4.tcp_mem'
    value: '65535 131072 262144'
  - name: 'net.ipv4.udp_mem'
    value: '65535 131072 262144'
  - name: 'net.ipv4.tcp_rmem'
    value: '8192 87380 16777216'
  - name: 'net.ipv4.udp_rmem_min'
    value: '16384'
  - name: 'net.ipv4.tcp_wmem'
    value: '8192 65535 16777216'
  - name: 'net.ipv4.udp_wmem_min'
    value: '16384'
  - name: 'net.ipv4.tcp_max_tw_buckets'
    value: '1440000'
  - name: 'net.ipv4.tcp_tw_reuse'
    value: '1'
  # - name: 'net.ipv4.tcp_tw_recycle'
  #   value: '1'
